<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flink 错误排查 -- Flink metrics 指标断断续续 - Prometheus + PushGateway + Grafana</title>
    <link href="/2023/09/20/flink/Flink%20%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%20--%20Flink%20metrics%20%E6%8C%87%E6%A0%87%E6%96%AD%E6%96%AD%E7%BB%AD%E7%BB%AD/"/>
    <url>/2023/09/20/flink/Flink%20%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%20--%20Flink%20metrics%20%E6%8C%87%E6%A0%87%E6%96%AD%E6%96%AD%E7%BB%AD%E7%BB%AD/</url>
    
    <content type="html"><![CDATA[<p>Prometheus + PushGateway + Grafana 是一套常用的监控 Flink metrics 的组合。网上有很多实践，这里就不赘述了。但是在使用的过程中还是遇到了一下问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>如果一个任务有多个 taskmanager ，dashboard 上 taskmanager 相关的指标则是断断续续的，如图所示：<br><img src="/img/flink/flink-taskmanager-dashboard.png"></p><p>导致 metrics 断断续续的另外一个原因：<a href="https://blog.csdn.net/daijiguo/article/details/105453643">Flink问题：记Flink Metrics时断时续问题排查</a>；不过我已经将 push 方法改成 pushAdd 方法之后重新打包。</p><p>当前 PushGateway 相关的一些配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">metrics.reporter.promgateway.factory.class: org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporterFactory<br>metrics.reporter.promgateway.hostUrl: http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxxx:<span class="hljs-number">9091</span><br>metrics.reporter.promgateway.randomJobNameSuffix: <span class="hljs-literal">false</span><br>metrics.reporter.promgateway.deleteOnShutdown: <span class="hljs-literal">true</span><br>metrics.reporter.promgateway.interval: <span class="hljs-number">30</span>s<br>metrics.reporter.promgateway.groupingKey: type<span class="hljs-operator">=</span>flink;env<span class="hljs-operator">=</span>test<br>metrics.reporter.promgateway.jobName: xxx <span class="hljs-comment">-- 提交任务的时候动态配置</span><br></code></pre></td></tr></table></figure><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>PushGateway 是按照 jobName、groupingKey 和 metric_name 更新数据的，测试：<br><img src="/img/flink/flink-metrics-1.png"><br><img src="/img/flink/flink-metrics-2.png"><br>可以发现在 jobName &#x3D; my_job、groupingKey &#x3D; type&#x3D;flink;env&#x3D;test、metric_name &#x3D; my_custom_metrics 的情况下，上报了两次指标，<br>第一次为 tm_id&#x3D;”container_e64_1691562725918_0295_01_000001” 的指标；<br>第二次为 tm_id&#x3D;”container_e64_1691562725918_0295_01_000002” 的指标；<br>但是第二次的指标直接把第一次的覆盖了，所以在多个 taskmanager 的情况下，同一个指标会相互覆盖，出现指标断断续续的情况。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将 <strong>metrics.reporter.promgateway.randomJobNameSuffix</strong> 设置为 true，这样每个 container（jobmanager、taskmanager） 在 jobName 之后会加上一个随机后缀（如下图所示），<br>同时在 <strong>metrics.reporter.promgateway.groupingKey</strong> 在加上一个 <strong>job_name&#x3D;xxx</strong> 的 key，可以看到 PushGateway 上每个 container 都会生成一个 group，不会再出现不同 taskmanager 的同一个 metric 相互覆盖的情况。<br><img src="/img/flink/flink-metrics-3.png"></p><p>在 Grafana Dashboard 中我们可以通过 groupingKey 中加上的 job_name&#x3D;xxx 进行分类筛选：<br><img src="/img/flink/flink-metrics-4.png"><br><img src="/img/flink/flink-metrics-5.png"></p>]]></content>
    
    
    <categories>
      
      <category>Flink 错误排查</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink 基础学习 -- 如何向 UDF 传递参数</title>
    <link href="/2023/08/22/flink/Flink%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%20--%20%E5%A6%82%E4%BD%95%E5%90%91%20UDF%20%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <url>/2023/08/22/flink/Flink%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%20--%20%E5%A6%82%E4%BD%95%E5%90%91%20UDF%20%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>SQL API 中加上：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;pipeline.global-job-parameters&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;env:prod&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后在 UserDefinedFunction 的 open 方法中获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(FunctionContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    String currentEnv=context.getJobParameter(ENV,Constant.TEST);<br>    ... ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>相关链接：<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/deployment/config/">https://nightlies.apache.org/flink/flink-docs-master/docs/deployment/config/</a></p>]]></content>
    
    
    <categories>
      
      <category>Flink 基础学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink 错误排查 -- Elasticsearch Sink - java.lang.OutOfMemoryError Direct buffer memory</title>
    <link href="/2023/08/22/flink/Flink%20%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%20--%20Elasticsearch%20Sink%EF%BC%9Ajava.lang.OutOfMemoryError:%20Direct%20buffer%20memory/"/>
    <url>/2023/08/22/flink/Flink%20%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5%20--%20Elasticsearch%20Sink%EF%BC%9Ajava.lang.OutOfMemoryError:%20Direct%20buffer%20memory/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>背景：近期上线了一个写 es 的 flink 任务，但是任务一直重启，然后进到 taskmanager 的日志找到了报错信息：<br><img src="/img/flink/flink-es-sink.png"></p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>因为写 es 的时候会把数据缓存在 直接内存（Direct Memory）&#x2F; 堆外内存 中，由报错信息可以看出，由于数据量比较大导致直接内存 OutOfMemory。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><img src="/img/flink/flink-taskmanager.png"><br>由 taskmanager 的内存模型来看，Direct Memory 由三部分组成：Framework Off-Heap、Task Off-Heap、Network；这里主要是用到了 Framework Off-Heap 这部分内存，所以可以调大 Framework Off-Heap 的内存：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>Dtaskmanager.memory.framework.off<span class="hljs-operator">-</span>heap.size<span class="hljs-operator">=</span><span class="hljs-number">640</span>m<br></code></pre></td></tr></table></figure><p>链接：</p><ol><li><a href="https://nightlies.apache.org/flink/flink-docs-release-1.16/zh/docs/deployment/memory/mem_setup_tm/">Flink taskmanager 内存模型</a></li><li><a href="https://nightlies.apache.org/flink/flink-docs-release-1.16/zh/docs/deployment/memory/mem_trouble/">Flink 内存常见问题</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Flink 错误排查</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink + StarRocks -- 用户行为挖掘与线索推荐</title>
    <link href="/2023/08/22/project/Flink%20+%20StarRocks%20--%20%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%8C%96%E6%8E%98%E4%B8%8E%E7%BA%BF%E7%B4%A2%E6%8E%A8%E8%8D%90/"/>
    <url>/2023/08/22/project/Flink%20+%20StarRocks%20--%20%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%8C%96%E6%8E%98%E4%B8%8E%E7%BA%BF%E7%B4%A2%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户在我们官网上或者是APP上会各种各样的操作行为，其中有几种典型的行为是值得做商机挖掘的，比如搜索并点击、浏览、加入购物车等等，希望大数据可以抓取过来，记载到这个客户名下，作为与客户沟通的信息谈资，同时做数据挖掘，自动推送线索到线上、线下团队，提高商机转化率。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>根据需求我们需要筛选出过去180天满足线索规则的用户，比如：过去180天内浏览该商品超过10次，则符合要求；规则是按照公司和行为维度触发的，比如：同一个公司下多个用户触发了同一个行为，多个用户触发行为的累计值达到了阈值，就会触发线索，向下游发生信息。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>目前每天的数量大概是 5000w 条，那么180天的数据量为90亿条，数据量非常大，但是目前会对数据进行筛选，只保留固定几种行为的用户、剔除无效的行为（比如未登录用户的行为）之后，每天的数据量大概为 1w 条数据。考虑到未来的扩展性，所以在设计方案的时候需要考虑到数据量非常大的情况。</p><h2 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h2><h3 id="方案一：Flink-State-TTL"><a href="#方案一：Flink-State-TTL" class="headerlink" title="方案一：Flink State + TTL"></a>方案一：Flink State + TTL</h3><p>存在的问题：状态太大，占用过多的内存资源；任务失败之后恢复困难。</p><h3 id="方案二：StarRocks-明细模型-物化视图-分区TTL"><a href="#方案二：StarRocks-明细模型-物化视图-分区TTL" class="headerlink" title="方案二：StarRocks 明细模型 + 物化视图 + 分区TTL"></a>方案二：StarRocks 明细模型 + 物化视图 + 分区TTL</h3><h4 id="StarRocks-明细模型：存储用户行为的明细："><a href="#StarRocks-明细模型：存储用户行为的明细：" class="headerlink" title="StarRocks 明细模型：存储用户行为的明细："></a>StarRocks 明细模型：存储用户行为的明细：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> dwd_pol_user_events (<br>    `credit_code` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `internal_event_code`   STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `user_id` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `phone_number` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `<span class="hljs-type">date</span>`    <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)<br>    DUPLICATE KEY(`credit_code`, `internal_event_code`, `user_id`)<br>    <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span>(`<span class="hljs-type">date</span>`) (<br>    <span class="hljs-keyword">START</span> (&quot;2023-01-20&quot;) <span class="hljs-keyword">END</span> (&quot;2023-08-08&quot;) <span class="hljs-keyword">EVERY</span> (<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">DAY</span>)<br>    )<br>    DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(`credit_code`, `internal_event_code`) BUCKETS <span class="hljs-number">6</span><br>    PROPERTIES (<br>        &quot;replication_num&quot; <span class="hljs-operator">=</span> &quot;3&quot;,<br>        &quot;dynamic_partition.enable&quot; <span class="hljs-operator">=</span> &quot;true&quot;,<br>        &quot;dynamic_partition.time_unit&quot; <span class="hljs-operator">=</span> &quot;DAY&quot;,<br>        &quot;dynamic_partition.start&quot; <span class="hljs-operator">=</span> &quot;-179&quot;,<br>        &quot;dynamic_partition.end&quot; <span class="hljs-operator">=</span> &quot;1&quot;,<br>        &quot;dynamic_partition.prefix&quot; <span class="hljs-operator">=</span> &quot;p&quot;,<br>        &quot;dynamic_partition.buckets&quot; <span class="hljs-operator">=</span> &quot;6&quot;);<br></code></pre></td></tr></table></figure><h4 id="物化视图：对-180-天的数据按照-company-internal-event-code（标签）-维度建物化视图，提高查询速度；"><a href="#物化视图：对-180-天的数据按照-company-internal-event-code（标签）-维度建物化视图，提高查询速度；" class="headerlink" title="物化视图：对 180 天的数据按照 company + internal_event_code（标签） 维度建物化视图，提高查询速度；"></a>物化视图：对 180 天的数据按照 company + internal_event_code（标签） 维度建物化视图，提高查询速度；</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> dwd_pol_user_events_view <span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">SELECT</span> `credit_code`, `internal_event_code`, <span class="hljs-built_in">COUNT</span>(`user_id`) <br><span class="hljs-keyword">FROM</span> dwd_pol_user_events <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `credit_code`, `internal_event_code`;<br></code></pre></td></tr></table></figure><h4 id="分区TTL：设置-180-天的-TTL，StarRocks-只会保存-180-天的数据。"><a href="#分区TTL：设置-180-天的-TTL，StarRocks-只会保存-180-天的数据。" class="headerlink" title="分区TTL：设置 180 天的 TTL，StarRocks 只会保存 180 天的数据。"></a>分区TTL：设置 180 天的 TTL，StarRocks 只会保存 180 天的数据。</h4><p>参考建表语句中动态分区相关的配置。</p><h3 id="方案二：StarRocks-聚合模型-物化视图-分区TTL"><a href="#方案二：StarRocks-聚合模型-物化视图-分区TTL" class="headerlink" title="方案二：StarRocks 聚合模型 + 物化视图 + 分区TTL"></a>方案二：StarRocks 聚合模型 + 物化视图 + 分区TTL</h3><h4 id="StarRocks-聚合模型：可以按照-date-company-internal-event-code（标签）提前聚合，大大减少数据量；"><a href="#StarRocks-聚合模型：可以按照-date-company-internal-event-code（标签）提前聚合，大大减少数据量；" class="headerlink" title="StarRocks 聚合模型：可以按照 date + company + internal_event_code（标签）提前聚合，大大减少数据量；"></a>StarRocks 聚合模型：可以按照 date + company + internal_event_code（标签）提前聚合，大大减少数据量；</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> dwd_pol_user_events_agg (<br>    `credit_code` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `internal_event_code`   STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `user_id` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `phone_number` STRING <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `<span class="hljs-type">date</span>`    <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `pv` <span class="hljs-type">BIGINT</span> SUM <span class="hljs-keyword">DEFAULT</span> &quot;1&quot; COMMENT &quot;total page views&quot;<br>)<br>    AGGREGATE KEY(`credit_code`, `internal_event_code`, `user_id`, `phone_number`, `<span class="hljs-type">date</span>`)<br>    <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span>(`<span class="hljs-type">date</span>`) (<br>    <span class="hljs-keyword">START</span> (&quot;2023-01-20&quot;) <span class="hljs-keyword">END</span> (&quot;2023-08-08&quot;) <span class="hljs-keyword">EVERY</span> (<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">DAY</span>)<br>    )<br>    DISTRIBUTED <span class="hljs-keyword">BY</span> HASH(`credit_code`, `internal_event_code`) BUCKETS <span class="hljs-number">6</span><br>    PROPERTIES (<br>        &quot;replication_num&quot; <span class="hljs-operator">=</span> &quot;3&quot;,<br>        &quot;dynamic_partition.enable&quot; <span class="hljs-operator">=</span> &quot;true&quot;,<br>        &quot;dynamic_partition.time_unit&quot; <span class="hljs-operator">=</span> &quot;DAY&quot;,<br>        &quot;dynamic_partition.start&quot; <span class="hljs-operator">=</span> &quot;-179&quot;,<br>        &quot;dynamic_partition.end&quot; <span class="hljs-operator">=</span> &quot;1&quot;,<br>        &quot;dynamic_partition.prefix&quot; <span class="hljs-operator">=</span> &quot;p&quot;,<br>        &quot;dynamic_partition.buckets&quot; <span class="hljs-operator">=</span> &quot;6&quot;);<br></code></pre></td></tr></table></figure><h4 id="物化视图：对-180-天的数据按照-company-internal-event-code（标签）维度建物化视图，提高查询速度；"><a href="#物化视图：对-180-天的数据按照-company-internal-event-code（标签）维度建物化视图，提高查询速度；" class="headerlink" title="物化视图：对 180 天的数据按照 company + internal_event_code（标签）维度建物化视图，提高查询速度；"></a>物化视图：对 180 天的数据按照 company + internal_event_code（标签）维度建物化视图，提高查询速度；</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> dwd_pol_user_events_agg_view <span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">SELECT</span> `credit_code`, `internal_event_code`, <span class="hljs-built_in">SUM</span>(`pv`) <br><span class="hljs-keyword">FROM</span> dwd_pol_user_events_agg <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `credit_code`, `internal_event_code`;<br></code></pre></td></tr></table></figure><h4 id="分区TTL：设置-180-天的-TTL，StarRocks-只会保存-180-天的数据。-1"><a href="#分区TTL：设置-180-天的-TTL，StarRocks-只会保存-180-天的数据。-1" class="headerlink" title="分区TTL：设置 180 天的 TTL，StarRocks 只会保存 180 天的数据。"></a>分区TTL：设置 180 天的 TTL，StarRocks 只会保存 180 天的数据。</h4><p>参考建表语句中动态分区相关的配置。</p><h2 id="数据链路"><a href="#数据链路" class="headerlink" title="数据链路"></a>数据链路</h2><p><img src="/img/project/user-behavior-clue.png"></p><h3 id="每个-Flink-任务的功能："><a href="#每个-Flink-任务的功能：" class="headerlink" title="每个 Flink 任务的功能："></a>每个 Flink 任务的功能：</h3><ul><li>①：对数据进行筛选，只保留产品定好的的几种行为、剔除无效的行为（比如未登录用户的行为）；</li><li>②：负责将数据写入 StarRocks 和 Kafka，这边大家可能会有疑问，这里为什么要写到 Kafka 中？后面会解答。</li><li>③：消费 Kafka 中的数据，并查询 StarRocks 统计过去 180 天 company 维度下所有用户触发了该行为的累计值，并查询 mysql 行为的阈值表，对比是否触发了阈值，如果触发了阈值，还需要查询行为的结果表，该 company 是否已经触发了线索，因为规定同一个 company 只能触发一次线索；</li><li>④：消费 Kafka 中的数据，写入 elasticsearch 中，供用户查询详细的信息。</li></ul><h3 id="mysql-阈值表结构"><a href="#mysql-阈值表结构" class="headerlink" title="mysql 阈值表结构"></a>mysql 阈值表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dim_pol_clue_event_threshold<br>(<br>    internal_event_code <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内部事件编码&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    internal_event_name <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内部事件名称&#x27;</span>,<br>    threshold_num       <span class="hljs-type">bigint</span>                              <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    create_time         <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time         <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;触发线索的时间阈值表&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="mysql-结果表结构"><a href="#mysql-结果表结构" class="headerlink" title="mysql 结果表结构"></a>mysql 结果表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dwd_pol_clue_trigger_info<br>(<br>    credit_code         <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内部事件编码&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    company_name        <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;企业名称&#x27;</span>,<br>    phone_numbers       text                                <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户电话号码&#x27;</span>,<br>    internal_event_code <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内部事件code&#x27;</span>,<br>    internal_event_name <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内部事件名称&#x27;</span>,<br>    event_trigger_num   <span class="hljs-type">bigint</span>                              <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;触发值&#x27;</span>,<br>    create_time         <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time         <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;线索触发信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><h3 id="第③个-Flink-任务中为什么要写-Kafka"><a href="#第③个-Flink-任务中为什么要写-Kafka" class="headerlink" title="第③个 Flink 任务中为什么要写 Kafka"></a>第③个 Flink 任务中为什么要写 Kafka</h3><p>因为下游的 Flink 任务需要根据 Kafka 中的数据触发查询 StarRocks 的行为，这样才能推动流的处理。</p><h3 id="StarRocks-压测"><a href="#StarRocks-压测" class="headerlink" title="StarRocks 压测"></a>StarRocks 压测</h3><p>这里需要对 StarRocks 进行压测，防止数据量太大对 StarRocks 造成太大的压力。这里使用 JMeter 进行压测。<br>测试环境 StarRocks 配置：3 FE、3 BE（16C 68G）；<br>表的分桶数分别为 3 和 24（按照 建议的 BE * CPU &#x2F; 2）；<br>结果：310qps。<br>能够满足当前的数据量。</p><h3 id="Flink-查询-StarRocks-UDF"><a href="#Flink-查询-StarRocks-UDF" class="headerlink" title="Flink 查询 StarRocks UDF"></a>Flink 查询 StarRocks UDF</h3><p>Flink 去查询 StarRocks 时使用的是 UDF，一共两个 UDF：</p><ul><li><p>获取 company 下某个行为的累计值：<br>公共类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarRocksJdbcConnectionProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LogManager.getLogger(StarRocksJdbcConnectionProvider.class);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String env;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Connection connection;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StarRocksJdbcConnectionProvider</span><span class="hljs-params">(String env)</span> &#123;<br>        <span class="hljs-built_in">this</span>.env = env;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (connection == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">if</span> (connection == <span class="hljs-literal">null</span>) &#123;<br>                    Class.forName(StarRocksJdbcConnConfig.DRIVER_NAME);<br>                    <span class="hljs-keyword">if</span> (PROD.equalsIgnoreCase(env)) &#123;<br>                        connection = DriverManager.getConnection(<br>                                StarRocksJdbcConnConfig.PROD_URL,<br>                                StarRocksJdbcConnConfig.PROD_USERNAME,<br>                                StarRocksJdbcConnConfig.PROD_PASSWORD);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        connection = DriverManager.getConnection(<br>                                StarRocksJdbcConnConfig.TEST_URL,<br>                                StarRocksJdbcConnConfig.TEST_USERNAME,<br>                                StarRocksJdbcConnConfig.TEST_PASSWORD);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">reestablishConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        close();<br>        connection = getConnection();<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnectionValid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> connection != <span class="hljs-literal">null</span><br>                &amp;&amp; connection.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (connection == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            LOGGER.error(<span class="hljs-string">&quot;JDBC connection close failed.&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            connection = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarRocksJdbcConnConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_RETRY_TIMES</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CONNECTION_CHECK_TIMEOUT_SECONDS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DRIVER_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">TEST_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://xxx:xxx/xxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">TEST_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">TEST_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PROD_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://xxx:xxx/xxxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PROD_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PROD_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>EventSum UDF：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventSum</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScalarFunction</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LogManager.getLogger(EventSum.class);<br><br>    <span class="hljs-keyword">private</span> StarRocksJdbcConnectionProvider jdbcConnProvider;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> PreparedStatement statement;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUERY</span> <span class="hljs-operator">=</span><br>            <span class="hljs-string">&quot;SELECT COUNT(`user_id`) FROM dwd_pol_user_events WHERE `credit_code` = ? AND `internal_event_code` = ?&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">establishStatement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        statement = jdbcConnProvider.getConnection().prepareStatement(QUERY);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(FunctionContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentEnv</span> <span class="hljs-operator">=</span> context.getJobParameter(ENV, Constant.TEST);<br>        LOGGER.info(<span class="hljs-string">&quot;Current env: &#123;&#125;&quot;</span>, currentEnv);<br>        jdbcConnProvider = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StarRocksJdbcConnectionProvider</span>(currentEnv);<br>        establishStatement();<br>    &#125;<br><br>    <span class="hljs-meta">@FunctionHint(</span><br><span class="hljs-meta">            input = &#123;@DataTypeHint(&quot;STRING&quot;), @DataTypeHint(&quot;STRING&quot;)&#125;,</span><br><span class="hljs-meta">            output = @DataTypeHint(&quot;BIGINT&quot;))</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">eval</span><span class="hljs-params">(String creditCode, String internalEventCode)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">if</span> (StrUtil.isBlankIfStr(creditCode) || StrUtil.isBlankIfStr(internalEventCode)) &#123;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">retry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; retry &lt;= MAX_RETRY_TIMES; retry++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.clearParameters();<br>                statement.setString(<span class="hljs-number">1</span>, creditCode);<br>                statement.setString(<span class="hljs-number">2</span>, internalEventCode);<br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery()) &#123;<br>                    <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> resultSet.getObject(<span class="hljs-number">1</span>);<br>                        sum = object == <span class="hljs-literal">null</span> ? sum : (Long) object;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                LOGGER.error(String.format(<span class="hljs-string">&quot;JDBC executeBatch error, retry times = %d&quot;</span>, retry), e);<br>                <span class="hljs-keyword">if</span> (retry &gt;= MAX_RETRY_TIMES) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Execution of JDBC statement failed.&quot;</span>, e);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!jdbcConnProvider.isConnectionValid()) &#123;<br>                        statement.close();<br>                        jdbcConnProvider.reestablishConnection();<br>                        establishStatement();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException | ClassNotFoundException exception) &#123;<br>                    LOGGER.error(<br>                            <span class="hljs-string">&quot;JDBC connection is not valid, and reestablish connection failed&quot;</span>,<br>                            exception);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Reestablish JDBC connection failed&quot;</span>, exception);<br>                &#125;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000L</span> * retry);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e1);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>            statement.close();<br>        &#125;<br>        jdbcConnProvider.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取 company 触发了某个行为的所有用户手机号码：<br>ExtractPhoneNumbers UDF：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtractPhoneNumbers</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScalarFunction</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LogManager.getLogger(ExtractPhoneNumbers.class);<br><br>    <span class="hljs-keyword">private</span> StarRocksJdbcConnectionProvider jdbcConnProvider;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> PreparedStatement statement;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUERY</span> <span class="hljs-operator">=</span><br>            <span class="hljs-string">&quot;SELECT group_concat(phone_numbers) FROM (SELECT distinct phone_number as phone_numbers FROM dwd_pol_user_events WHERE credit_code = ? AND `internal_event_code` = ? AND phone_number &lt;&gt; &#x27;&#x27;) t1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">establishStatement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        statement = jdbcConnProvider.getConnection().prepareStatement(QUERY);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(FunctionContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentEnv</span> <span class="hljs-operator">=</span> context.getJobParameter(ENV, Constant.TEST);<br>        LOGGER.info(<span class="hljs-string">&quot;Current env: &#123;&#125;&quot;</span>, currentEnv);<br>        jdbcConnProvider = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StarRocksJdbcConnectionProvider</span>(currentEnv);<br>        establishStatement();<br>    &#125;<br><br>    <span class="hljs-meta">@FunctionHint(</span><br><span class="hljs-meta">            input = &#123;@DataTypeHint(&quot;STRING&quot;), @DataTypeHint(&quot;STRING&quot;)&#125;,</span><br><span class="hljs-meta">            output = @DataTypeHint(&quot;STRING&quot;))</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eval</span><span class="hljs-params">(String creditCode, String internalEventCode)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumbers</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (StrUtil.isBlankIfStr(creditCode) || StrUtil.isBlankIfStr(internalEventCode)) &#123;<br>            <span class="hljs-keyword">return</span> phoneNumbers;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">retry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; retry &lt;= MAX_RETRY_TIMES; retry++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.clearParameters();<br>                statement.setString(<span class="hljs-number">1</span>, creditCode);<br>                statement.setString(<span class="hljs-number">2</span>, internalEventCode);<br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery()) &#123;<br>                    <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> resultSet.getObject(<span class="hljs-number">1</span>);<br>                        phoneNumbers = object == <span class="hljs-literal">null</span> ? phoneNumbers : (String) object;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                LOGGER.error(String.format(<span class="hljs-string">&quot;JDBC executeBatch error, retry times = %d&quot;</span>, retry), e);<br>                <span class="hljs-keyword">if</span> (retry &gt;= MAX_RETRY_TIMES) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Execution of JDBC statement failed.&quot;</span>, e);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!jdbcConnProvider.isConnectionValid()) &#123;<br>                        statement.close();<br>                        jdbcConnProvider.reestablishConnection();<br>                        establishStatement();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException | ClassNotFoundException exception) &#123;<br>                    LOGGER.error(<br>                            <span class="hljs-string">&quot;JDBC connection is not valid, and reestablish connection failed&quot;</span>,<br>                            exception);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Reestablish JDBC connection failed&quot;</span>, exception);<br>                &#125;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000L</span> * retry);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e1);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> phoneNumbers;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>            statement.close();<br>        &#125;<br>        jdbcConnProvider.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="SQL-代码"><a href="#SQL-代码" class="headerlink" title="SQL 代码"></a>SQL 代码</h2><h3 id="②-号Flink-任务"><a href="#②-号Flink-任务" class="headerlink" title="② 号Flink 任务"></a>② 号Flink 任务</h3><p>任务配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">-p 3<br></code></pre></td></tr></table></figure><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span><br>CATALOG kafka <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hive&#x27;</span>,<br>    <span class="hljs-string">&#x27;default-database&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigdata_policy_rt&#x27;</span>,<br>    <span class="hljs-string">&#x27;hive-conf-dir&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;/etc/hive/conf&#x27;</span><br>);<br><br><span class="hljs-keyword">CREATE</span><br>CATALOG starrocks <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hive&#x27;</span>,<br>    <span class="hljs-string">&#x27;default-database&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigdata_policy_rt&#x27;</span>,<br>    <span class="hljs-string">&#x27;hive-conf-dir&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;/etc/hive/conf&#x27;</span><br>);<br><br>USE CATALOG kafka;<br>USE CATALOG starrocks;<br><br><span class="hljs-comment">-- 去重</span><br><span class="hljs-keyword">CREATE</span><br>TEMPORARY <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> view_user_events <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> IFNULL(`currCreditCode`, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">AS</span> `credit_code`,<br>       IFNULL(`currCompanyName`, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">AS</span> `company_name`,<br>       `internal_event_code`,<br>       `internal_event_name`,<br>       IFNULL(`user_id`, <span class="hljs-string">&#x27;&#x27;</span>)         <span class="hljs-keyword">AS</span> `user_id`,<br>       IFNULL(`phone`, <span class="hljs-string">&#x27;&#x27;</span>)           <span class="hljs-keyword">AS</span> `phone_number`,<br>       `<span class="hljs-type">time</span>`,<br>       TO_DATE(FROM_UNIXTIME(<span class="hljs-built_in">CAST</span>(`<span class="hljs-type">time</span>` <span class="hljs-keyword">AS</span> <span class="hljs-type">BIGINT</span>) <span class="hljs-operator">/</span> <span class="hljs-number">1000</span>)) <span class="hljs-keyword">AS</span> `<span class="hljs-type">date</span>`<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">TABLE</span>(<br>        TUMBLE(<span class="hljs-keyword">TABLE</span> kafka.bigdata_policy_rt.dwd_pol_kafka_portrait_action_info, DESCRIPTOR(proc_time), <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;60&#x27;</span> seconds))<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `currCreditCode`, `currCompanyName`, `internal_event_code`, `internal_event_name`, `user_id`, `phone`, `<span class="hljs-type">time</span>`;<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `starrocks`.`bigdata_policy_rt`.`dwd_pol_user_events`<br><span class="hljs-keyword">SELECT</span> `credit_code`,<br>       `internal_event_code`,<br>       `user_id`,<br>       `phone_number`,<br>       TO_DATE(FROM_UNIXTIME(<span class="hljs-built_in">CAST</span>(`<span class="hljs-type">time</span>` <span class="hljs-keyword">AS</span> <span class="hljs-type">BIGINT</span>) <span class="hljs-operator">/</span> <span class="hljs-number">1000</span>)) <span class="hljs-keyword">AS</span> `<span class="hljs-type">date</span>`<br><span class="hljs-keyword">FROM</span> view_user_events<br><span class="hljs-keyword">WHERE</span> `<span class="hljs-type">date</span>` <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2023-08-07&#x27;</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `kafka`.`bigdata_policy_rt`.`dwd_pol_kafka_clue_user_events`<br><span class="hljs-keyword">SELECT</span> `credit_code`,<br>       `company_name`,<br>       `internal_event_code`,<br>       `internal_event_name`,<br>       `user_id`,<br>       `phone_number`,<br>       `<span class="hljs-type">time</span>`<br><span class="hljs-keyword">FROM</span> view_user_events<br><span class="hljs-keyword">WHERE</span> `<span class="hljs-type">date</span>` <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2023-08-07&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="③-号Flink-任务"><a href="#③-号Flink-任务" class="headerlink" title="③ 号Flink 任务"></a>③ 号Flink 任务</h3><p>任务配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">-p 1 -Dtaskmanager.numberOfTaskSlots=1 -Dtaskmanager.memory.process.size=3072m<br></code></pre></td></tr></table></figure><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;pipeline.global-job-parameters&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;env:prod&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> CATALOG kafka <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hive&#x27;</span>,<br>    <span class="hljs-string">&#x27;default-database&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigdata_policy_rt&#x27;</span>,<br>    <span class="hljs-string">&#x27;hive-conf-dir&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;/etc/hive/conf&#x27;</span><br>);<br><br><span class="hljs-keyword">CREATE</span> CATALOG mysql <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hive&#x27;</span>,<br>    <span class="hljs-string">&#x27;default-database&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigdata_policy_rt&#x27;</span>,<br>    <span class="hljs-string">&#x27;hive-conf-dir&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;/etc/hive/conf&#x27;</span><br>);<br><br><span class="hljs-keyword">CREATE</span> CATALOG starrocks <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hive&#x27;</span>,<br>    <span class="hljs-string">&#x27;default-database&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigdata_policy_rt&#x27;</span>,<br>    <span class="hljs-string">&#x27;hive-conf-dir&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;/etc/hive/conf&#x27;</span><br>);<br><br>USE CATALOG kafka;<br>USE CATALOG mysql;<br>USE CATALOG starrocks;<br><br><br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> EventSum <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;xxx.EventSum&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> ExtractPhoneNumbers <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;xxx.ExtractPhoneNumbers&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> view_company_event_info <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> `credit_code`,<br>       `company_name`,<br>       `internal_event_code`,<br>       `internal_event_name`,<br>       `user_id`,<br>       `phone_number`,<br>       `<span class="hljs-type">time</span>`<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">TABLE</span>(<br>        TUMBLE(<span class="hljs-keyword">TABLE</span> `kafka`.`bigdata_policy_rt`.`dwd_pol_kafka_clue_user_events`, DESCRIPTOR(proc_time), <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;60&#x27;</span> seconds))<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `credit_code`,<br>         `company_name`,<br>         `internal_event_code`,<br>         `internal_event_name`,<br>         `user_id`,<br>         `phone_number`,<br>         `<span class="hljs-type">time</span>`;<br><br><span class="hljs-comment">-- 筛选出触发了阈值和未创建线索的企业</span><br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> view_clue_trigger_company <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> t1.credit_code,<br>       t1.company_name,<br>       t1.internal_event_code,<br>       t1.internal_event_name,<br>       t1.event_sum <span class="hljs-keyword">AS</span> event_trigger_num,<br>       t1.proc_time<br><span class="hljs-keyword">FROM</span> (<br>         <span class="hljs-keyword">SELECT</span><br>             credit_code,<br>             company_name,<br>             internal_event_code,<br>             internal_event_name,<br>             EventSum(credit_code, internal_event_code) <span class="hljs-keyword">AS</span> event_sum,<br>             PROCTIME() <span class="hljs-keyword">AS</span> proc_time<br>         <span class="hljs-keyword">FROM</span> view_company_event_info<br>     ) t1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> `mysql`.`bigdata_policy_rt`.`dim_pol_clue_event_threshold` <span class="hljs-comment">/*+ OPTIONS(&#x27;lookup.cache&#x27;=&#x27;PARTIAL&#x27;, &#x27;lookup.cache.max-rows&#x27;=&#x27;5000&#x27;, &#x27;lookup.cache.ttl&#x27;=&#x27;10m&#x27;, &#x27;lookup.partial-cache.expire-after-write&#x27;=&#x27;10m&#x27;, &#x27;lookup.partial-cache.expire-after-access&#x27;=&#x27;10m&#x27;) */</span> <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">SYSTEM_TIME</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">OF</span> t1.proc_time <span class="hljs-keyword">AS</span> t2<br><span class="hljs-keyword">ON</span> t1.internal_event_code <span class="hljs-operator">=</span> t2.internal_event_code<br><span class="hljs-keyword">WHERE</span> t2.internal_event_code <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> t1.event_sum <span class="hljs-operator">&gt;=</span> t2.threshold_num;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `mysql`.`bigdata_policy_rt`.`dwd_pol_clue_trigger_info`<br><span class="hljs-keyword">SELECT</span> credit_code,<br>       company_name,<br>       ExtractPhoneNumbers(credit_code, internal_event_code) <span class="hljs-keyword">AS</span> phone_numbers,<br>       internal_event_code,<br>       internal_event_name,<br>       event_trigger_num<br><span class="hljs-keyword">FROM</span> (<br>         <span class="hljs-keyword">SELECT</span> t1.credit_code,<br>                t1.company_name,<br>                t1.internal_event_code,<br>                t1.internal_event_name,<br>                t1.event_trigger_num<br>         <span class="hljs-keyword">FROM</span> view_clue_trigger_company t1<br>                  <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> `mysql`.`bigdata_policy_rt`.`dwd_pol_clue_trigger_info` <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">SYSTEM_TIME</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">OF</span> t1.proc_time <span class="hljs-keyword">AS</span> t2<br>                            <span class="hljs-keyword">ON</span> t1.credit_code <span class="hljs-operator">=</span> t2.credit_code<br>         <span class="hljs-keyword">WHERE</span> t2.credit_code <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br>     ) t3;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Flink 实时项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink + StarRocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
